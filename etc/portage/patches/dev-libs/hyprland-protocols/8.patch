From 1a70b1116184df4fb5fc0829013b73712c054505 Mon Sep 17 00:00:00 2001
From: Gwilherm Folliot <gwilherm55fo@gmail.com>
Date: Mon, 23 Sep 2024 11:12:11 +0200
Subject: [PATCH 1/6] WIP: input capture

---
 meson.build                             |  1 +
 protocols/hyprland-input-capture-v1.xml | 77 +++++++++++++++++++++++++
 2 files changed, 78 insertions(+)
 create mode 100644 protocols/hyprland-input-capture-v1.xml

diff --git a/meson.build b/meson.build
index 53767d8..c3e441c 100644
--- a/meson.build
+++ b/meson.build
@@ -14,6 +14,7 @@ protocols = {
   'hyprland-ctm-control': ['v1'],
   'hyprland-surface': ['v1'],
   'hyprland-lock-notify': ['v1'],
+  'hyprland-input-capture': ['v1'],
 }
 
 protocol_files = []
diff --git a/protocols/hyprland-input-capture-v1.xml b/protocols/hyprland-input-capture-v1.xml
new file mode 100644
index 0000000..abf8e10
--- /dev/null
+++ b/protocols/hyprland-input-capture-v1.xml
@@ -0,0 +1,77 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<protocol name="hyprland_input_capture_v1">
+
+  <copyright>
+    Copyright Â© 2024 Fl0w
+    All rights reserved.
+
+    Redistribution and use in source and binary forms, with or without
+    modification, are permitted provided that the following conditions are met:
+
+    1. Redistributions of source code must retain the above copyright notice, this
+    list of conditions and the following disclaimer.
+
+    2. Redistributions in binary form must reproduce the above copyright notice,
+    this list of conditions and the following disclaimer in the documentation
+    and/or other materials provided with the distribution.
+
+    3. Neither the name of the copyright holder nor the names of its
+    contributors may be used to endorse or promote products derived from
+    this software without specific prior written permission.
+
+    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+    DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
+    FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+    DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+    SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+    CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+    OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+    OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+  </copyright>
+
+  <description summary="capture the inputs for sending it to a window">
+    This protocol allows clients to create bordel for when the mouse cross,
+    the inputs are send to the client.
+
+    Usefull for implementing the input capture portal.
+  </description>
+
+  <interface name="hyprland_input_capture_manager_v1" version="1">
+    <description summary="manager for capturing inputs">
+      This interface allow a client to capture inputs and receive events
+    </description>
+
+    <request name="capture">
+      <description summary="start capture">
+        Start the capturing of inputs.
+      </description>
+    </request>
+
+    <request name="release">
+      <description summary="end capture">
+        End the capturing of inputs.
+      </description>
+    </request>
+
+    <event name="absolute_motion">
+      <description summary="pointer motion">
+        Event trigger when the mouse cursor mouse. It contains
+        the absolute position of x and y and also the relative motion of the pointer.
+        Note that the dx and dy vectors can be accelerated, please use the relative motion protocol
+        for unaccelerated inputs.
+      </description>
+      <arg name="x"
+        type="fixed"
+        summary="the x position of the cursor" />
+      <arg name="y" type="fixed"
+        summary="the y position of the cursor" />
+      <arg name="dx" type="fixed"
+        summary="the x component of the motion vector" />
+      <arg name="dy" type="fixed"
+        summary="the y component of the motion vector" />
+    </event>
+
+  </interface>
+</protocol>

From 0da96fe9fa0a41534ceea66a161f3f8b7d663e32 Mon Sep 17 00:00:00 2001
From: Gwilherm Folliot <gwilherm55fo@gmail.com>
Date: Wed, 25 Sep 2024 17:59:31 +0200
Subject: [PATCH 2/6] input-capture: impl keyboard, mouse button & mouse wheel

---
 protocols/hyprland-input-capture-v1.xml | 132 ++++++++++++++++++++++++
 1 file changed, 132 insertions(+)

diff --git a/protocols/hyprland-input-capture-v1.xml b/protocols/hyprland-input-capture-v1.xml
index abf8e10..c5c26e3 100644
--- a/protocols/hyprland-input-capture-v1.xml
+++ b/protocols/hyprland-input-capture-v1.xml
@@ -73,5 +73,137 @@
         summary="the y component of the motion vector" />
     </event>
 
+    <enum name="key_state">
+      <description summary="physical key state">
+        Describes the physical state of a key that produced the key event.
+      </description>
+      <entry name="released" value="0" summary="key is not pressed" />
+      <entry name="pressed" value="1" summary="key is pressed" />
+    </enum>
+
+    <event name="key">
+      <description summary="key event">
+        A key was pressed or released.
+        The key is a platform-specific key code that can be interpreted
+        by feeding it to the keyboard mapping (see the keymap event).
+      </description>
+      <arg name="key" type="uint" summary="key that produced the event" />
+      <arg name="state" type="uint" enum="key_state" summary="physical state of the key" />
+    </event>
+
+    <enum name="button_state">
+      <description summary="physical button state">
+        Describes the physical state of a button that produced the button
+        event.
+      </description>
+      <entry name="released" value="0" summary="the button is not pressed" />
+      <entry name="pressed" value="1" summary="the button is pressed" />
+    </enum>
+
+    <event name="button">
+      <description summary="pointer button event">
+        Mouse button click and release notifications.
+
+        The location of the click is given by the last motion or
+        enter event.
+
+        The button is a button code as defined in the Linux kernel's
+        linux/input-event-codes.h header file, e.g. BTN_LEFT.
+      </description>
+      <arg name="button" type="uint" summary="button that produced the event" />
+      <arg name="state" type="uint" enum="button_state" summary="physical state of the button" />
+    </event>
+
+    <enum name="axis">
+      <description summary="axis types">
+        Describes the axis types of scroll events.
+      </description>
+      <entry name="vertical_scroll" value="0" summary="vertical axis" />
+      <entry name="horizontal_scroll" value="1" summary="horizontal axis" />
+    </enum>
+
+    <event name="axis">
+      <description summary="axis event">
+        Scroll and other axis notifications.
+
+        For scroll events (vertical and horizontal scroll axes), the
+        value parameter is the length of a vector along the specified
+        axis in a coordinate space identical to those of motion events,
+        representing a relative movement along the specified axis.
+
+        For devices that support movements non-parallel to axes multiple
+        axis events will be emitted.
+
+        When applicable, for example for touch pads, the server can
+        choose to emit scroll events where the motion vector is
+        equivalent to a motion event vector.
+
+        When applicable, a client can transform its content relative to the
+        scroll distance.
+      </description>
+      <arg name="axis" type="uint" enum="axis" summary="axis type" />
+      <arg name="value" type="fixed" summary="length of vector in surface-local coordinate space" />
+    </event>
+
+    <event name="axis_value120">
+      <description summary="axis high-resolution scroll event">
+        Discrete high-resolution scroll information.
+
+        This event carries high-resolution wheel scroll information,
+        with each multiple of 120 representing one logical scroll step
+        (a wheel detent). For example, an axis_value120 of 30 is one quarter of
+        a logical scroll step in the positive direction, a value120 of
+        -240 are two logical scroll steps in the negative direction within the
+        same hardware event.
+        Clients that rely on discrete scrolling should accumulate the
+        value120 to multiples of 120 before processing the event.
+
+        The value120 must not be zero.
+      </description>
+      <arg name="axis" type="uint" enum="axis" summary="axis type" />
+      <arg name="value120" type="int" summary="scroll distance as fraction of 120" />
+    </event>
+
+    <event name="axis_stop">
+      <description summary="axis stop event">
+        Stop notification for scroll and other axes.
+
+        A axis_stop event can be sent to notify a client that the
+        axis sequence has terminated.
+        This enables the client to implement kinetic scrolling.
+
+        The timestamp is to be interpreted identical to the timestamp in the
+        axis event. The timestamp value may be the same as a
+        preceding axis event.
+      </description>
+      <arg name="axis" type="uint" enum="axis" summary="the axis stopped with this event" />
+    </event>
+
+    <event name="frame">
+      <description summary="end of a pointer event sequence">
+        Indicates the end of a set of events that logically belong together.
+        A client is expected to accumulate the data in all events within the
+        frame before proceeding.
+
+        All wl_pointer events before a frame event belong
+        logically together. For example, in a diagonal scroll motion the
+        compositor will two axis events (horizontal and vertical) and
+        a frame event. The client may use this information to
+        calculate a diagonal vector for scrolling.
+
+        When multiple axis events occur within the same frame,
+        the motion vector is the combined motion of all events.
+        When a axis and a wl_pointer.axis_stop event occur within
+        the same frame, this indicates that axis movement in one axis has
+        stopped but continues in the other axis.
+        When multiple axis_stop events occur within the same
+        frame, this indicates that these axes stopped in the same instance.
+
+        A frame event is sent for every logical event group,
+        even if the group only contains a single wl_pointer event.
+        Specifically, a client may get a sequence: motion, frame, button,
+        frame, axis, frame, axis_stop, frame.
+      </description>
+    </event>
   </interface>
 </protocol>

From b605e8d5f66f613cb90905e3a136a68825d43933 Mon Sep 17 00:00:00 2001
From: Gwilherm Folliot <gwilherm55fo@gmail.com>
Date: Mon, 30 Sep 2024 12:13:24 +0200
Subject: [PATCH 3/6] Fix spelling & rephrase motion event

---
 protocols/hyprland-input-capture-v1.xml | 21 +++++++++++++--------
 1 file changed, 13 insertions(+), 8 deletions(-)

diff --git a/protocols/hyprland-input-capture-v1.xml b/protocols/hyprland-input-capture-v1.xml
index c5c26e3..3279295 100644
--- a/protocols/hyprland-input-capture-v1.xml
+++ b/protocols/hyprland-input-capture-v1.xml
@@ -32,15 +32,15 @@
   </copyright>
 
   <description summary="capture the inputs for sending it to a window">
-    This protocol allows clients to create bordel for when the mouse cross,
-    the inputs are send to the client.
+    This protocol allows clients to create borders, for which after crossing,
+    mouse events will be forwarded to the client
 
-    Usefull for implementing the input capture portal.
+    Useful for implementing the input capture portal.
   </description>
 
   <interface name="hyprland_input_capture_manager_v1" version="1">
     <description summary="manager for capturing inputs">
-      This interface allow a client to capture inputs and receive events
+      This interface allows a client to capture inputs and receive events
     </description>
 
     <request name="capture">
@@ -55,11 +55,15 @@
       </description>
     </request>
 
-    <event name="absolute_motion">
+    <event name="motion">
       <description summary="pointer motion">
-        Event trigger when the mouse cursor mouse. It contains
-        the absolute position of x and y and also the relative motion of the pointer.
-        Note that the dx and dy vectors can be accelerated, please use the relative motion protocol
+        Notification of pointer location change.
+
+        It contains the absolute position of x and y and also the
+        relative motion of the pointer.
+
+        Note that the dx and dy vectors can be accelerated,
+        please use the relative motion protocol
         for unaccelerated inputs.
       </description>
       <arg name="x"
@@ -84,6 +88,7 @@
     <event name="key">
       <description summary="key event">
         A key was pressed or released.
+
         The key is a platform-specific key code that can be interpreted
         by feeding it to the keyboard mapping (see the keymap event).
       </description>

From 7926613ef37613b34e67ff3c02963d6c6b16454a Mon Sep 17 00:00:00 2001
From: Gwilherm Folliot <gwilherm55fo@gmail.com>
Date: Mon, 7 Oct 2024 14:29:12 +0200
Subject: [PATCH 4/6] input-capture: impl keymap

---
 protocols/hyprland-input-capture-v1.xml | 32 ++++++++++++++++++++++---
 1 file changed, 29 insertions(+), 3 deletions(-)

diff --git a/protocols/hyprland-input-capture-v1.xml b/protocols/hyprland-input-capture-v1.xml
index 3279295..a96863a 100644
--- a/protocols/hyprland-input-capture-v1.xml
+++ b/protocols/hyprland-input-capture-v1.xml
@@ -2,7 +2,11 @@
 <protocol name="hyprland_input_capture_v1">
 
   <copyright>
+    Copyright Â© 2008-2011 Kristian HÃ¸gsberg
+    Copyright Â© 2010-2011 Intel Corporation
+    Copyright Â© 2012-2013 Collabora, Ltd.
     Copyright Â© 2024 Fl0w
+
     All rights reserved.
 
     Redistribution and use in source and binary forms, with or without
@@ -77,6 +81,28 @@
         summary="the y component of the motion vector" />
     </event>
 
+    <enum name="keymap_format">
+      <description summary="keyboard mapping format">
+        This specifies the format of the keymap provided to the
+        client with the keymap event.
+      </description>
+      <entry name="no_keymap" value="0"
+        summary="no keymap; client must understand how to interpret the raw keycode" />
+      <entry name="xkb_v1" value="1"
+        summary="libxkbcommon compatible, null-terminated string; to determine the xkb keycode, clients must add 8 to the key event keycode" />
+    </enum>
+
+    <event name="keymap">
+      <description summary="keyboard mapping">
+        This event provides a file descriptor to the client which can be
+        memory-mapped in read-only mode to provide a keyboard mapping
+        description.
+      </description>
+      <arg name="format" type="uint" enum="keymap_format" summary="keymap format" />
+      <arg name="fd" type="fd" summary="keymap file descriptor" />
+      <arg name="size" type="uint" summary="keymap size, in bytes" />
+    </event>
+
     <enum name="key_state">
       <description summary="physical key state">
         Describes the physical state of a key that produced the key event.
@@ -190,7 +216,7 @@
         A client is expected to accumulate the data in all events within the
         frame before proceeding.
 
-        All wl_pointer events before a frame event belong
+        All pointer events before a frame event belong
         logically together. For example, in a diagonal scroll motion the
         compositor will two axis events (horizontal and vertical) and
         a frame event. The client may use this information to
@@ -198,14 +224,14 @@
 
         When multiple axis events occur within the same frame,
         the motion vector is the combined motion of all events.
-        When a axis and a wl_pointer.axis_stop event occur within
+        When a axis and a axis_stop event occur within
         the same frame, this indicates that axis movement in one axis has
         stopped but continues in the other axis.
         When multiple axis_stop events occur within the same
         frame, this indicates that these axes stopped in the same instance.
 
         A frame event is sent for every logical event group,
-        even if the group only contains a single wl_pointer event.
+        even if the group only contains a single pointer event.
         Specifically, a client may get a sequence: motion, frame, button,
         frame, axis, frame, axis_stop, frame.
       </description>

From fa50e45099e762287c1811816be3163753ae62c4 Mon Sep 17 00:00:00 2001
From: Gwilherm Folliot <gwilherm55fo@gmail.com>
Date: Mon, 21 Oct 2024 10:21:08 +0200
Subject: [PATCH 5/6] input-capture: add force_release event

---
 protocols/hyprland-input-capture-v1.xml | 7 +++++++
 1 file changed, 7 insertions(+)

diff --git a/protocols/hyprland-input-capture-v1.xml b/protocols/hyprland-input-capture-v1.xml
index a96863a..58401f2 100644
--- a/protocols/hyprland-input-capture-v1.xml
+++ b/protocols/hyprland-input-capture-v1.xml
@@ -59,6 +59,13 @@
       </description>
     </request>
 
+    <event name="force_release">
+      <description summary="force release">
+        This event is triggered by the compositor to tell that he has
+        released the capture of inputs
+      </description>
+    </event>
+
     <event name="motion">
       <description summary="pointer motion">
         Notification of pointer location change.

From 5341ab4d644daf092a97ec1935ac72315a3aa19b Mon Sep 17 00:00:00 2001
From: Gwilherm Folliot <gwilherm55fo@gmail.com>
Date: Fri, 13 Dec 2024 23:08:57 +0100
Subject: [PATCH 6/6] input-capture: add modifiers event

---
 protocols/hyprland-input-capture-v1.xml | 22 ++++++++++++++++++++++
 1 file changed, 22 insertions(+)

diff --git a/protocols/hyprland-input-capture-v1.xml b/protocols/hyprland-input-capture-v1.xml
index 58401f2..37a82f3 100644
--- a/protocols/hyprland-input-capture-v1.xml
+++ b/protocols/hyprland-input-capture-v1.xml
@@ -129,6 +129,28 @@
       <arg name="state" type="uint" enum="key_state" summary="physical state of the key" />
     </event>
 
+    <event name="modifiers">
+      <description summary="modifier and group state">
+        Notifies clients that the modifier and/or group state has
+        changed, and it should update its local state.
+
+        The compositor may send this event without a surface of the client
+        having keyboard focus, for example to tie modifier information to
+        pointer focus instead. If a modifier event with pressed modifiers is sent
+        without a prior enter event, the client can assume the modifier state is
+        valid until it receives the next modifiers event. In order to
+        reset the modifier state again, the compositor can send a
+        modifiers event with no pressed modifiers.
+
+        In the wl_keyboard logical state, this event updates the modifiers and
+        group.
+      </description>
+      <arg name="mods_depressed" type="uint" summary="depressed modifiers"/>
+      <arg name="mods_latched" type="uint" summary="latched modifiers"/>
+      <arg name="mods_locked" type="uint" summary="locked modifiers"/>
+      <arg name="group" type="uint" summary="keyboard layout"/>
+    </event>
+
     <enum name="button_state">
       <description summary="physical button state">
         Describes the physical state of a button that produced the button
